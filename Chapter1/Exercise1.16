Recursive algo

(define (expt b n)
  (if (= n 0)
      1
      (* b (expt b (- n 1)))))

Iterative algo

(define (expt b n)
  (expt-iter b n 1)

(define (expt-iter b counter product)
  (if (= counter 0)
      product
      (expt-iter b
		 (- counter 1)
		 (* b product))))


Fast-expt or squaring recursive algo

(define (fast-expt b n)
  (cond ((= n 0) 1)
	((even? n) (square (fast-expt b (/ n 2))))
	((else ( * b (fast-expt b (- n 1)))))))

Fast-expt or squaring iterative algo(my version)

(define (fast-expt b n)
  (fast-expt-iter b n 1))

(define (fast-expt-iter b counter a)
  (cond ((= counter 0) a)
        ((even? counter) (square (fast-expt-iter b (/ counter 2 a) a)))
	(else (* b (fast-expt-iter b (- counter 1) a)))))

Fast-expt from web
(define (fast-expt-iter a b n)
  (cond ((= n 0 ) a)
        ((even? n) (fast-expt-iter a (* b b) (/ n 2)))
	(else (fast-expt-iter (* a b) b (n - 1)))))
