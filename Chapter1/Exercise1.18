Exercise 1.16:

Recursive algo

(define (expt b n)
  (if (= n 0)
      1
      (* b (expt b (- n 1)))))

Iterative algo

(define (expt b n)
  (expt-iter b n 1)

(define (expt-iter b counter product)
  (if (= counter 0)
      product
      (expt-iter b
		 (- counter 1)
		 (* b product))))


Fast-expt or squaring recursive algo

(define (fast-expt b n)
  (cond ((= n 0) 1)
	((even? n) (square (fast-expt b (/ n 2))))
	((else ( * b (fast-expt b (- n 1)))))))

Fast-expt or squaring iterative algo(my version)

(define (fast-expt b n)
  (fast-expt-iter b n 1))

(define (fast-expt-iter b counter a)
  (cond ((= counter 0) a)
        ((even? counter) (square (fast-expt-iter b (/ counter 2 a) a)))
	(else (* b (fast-expt-iter b (- counter 1) a)))))

Fast-expt from web
(define (fast-expt-iter a b n)
  (cond ((= n 0 ) a)
        ((even? n) (fast-expt-iter a (* b b) (/ n 2)))
	(else (fast-expt-iter (* a b) b (n - 1)))))

Execise 1.17:

(define (* a b)
  (if (= b 0) 0 (+ a (* a (- b 1)))))


(define (mul a b)
  (if (= b 0) 0 (+ a (mul a (- b 1)))))


(define (fast-mul a b)
  (cond ((= b 0) 0)
        ((even? b) (fast-mul (double a) (halve b)))
        (else (+ a (fast-mul a (- b 1))))))

(define (double x) (* x 2))

(define (halve x) (/ x 2))

Execise 1.18, Iterative process for multiplying 2 integers in terms of adding, doubleing and halving using logarithmic numbers of steps

(define (fast-mul a b)
  (fast-mul-iter a b 1))

(define (fast-mul-iter a b product)
  (cond ((= b 0) product)
	((even? b) (fast-mul-iter (double a) (halve b) product))
	(else (fast-mul-iter a (- b 1) (+ a product)))))

fast-mul-iter new try
(define (fast-mul-iter a b n)
  ((cond ((= n 0) a)
  ((even? n) (fast-mul-iter a (double b) (halve n)))
  (else (fast-mul-iter (+ a b) b (- n 1))))))
